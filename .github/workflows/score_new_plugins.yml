name: Trigger scoring run


# Triggered on all PRs on merge to master
# If changes are made to a subdir of /benchmarks or /models,
# a Jenkins scoring run is triggered for the corresponding plugin


on:
  pull_request_target:
    branches:
      - master
    types:
      - closed

env:
  BSC_DATABASESECRET: secrets.BSC_DATABASESECRET

permissions: write-all

jobs:

  process_submission:
    name: If triggering PR alters /models or /benchmarks, initiates scoring for relevant plugins
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      RUN_SCORING: ${{ steps.scoringneeded.outputs.RUN_SCORING }}
      METADATA_ONLY: ${{ steps.check_metadata_only.outputs.only_metadata }}
      PLUGIN_DIRS: ${{ steps.derive_plugin_dirs.outputs.PLUGIN_DIRS }}
      PLUGIN_TYPE: ${{ steps.derive_plugin_dirs.outputs.PLUGIN_TYPE }}
      RUN_METADATA: ${{  steps.check_metadata.outputs.RUN_METADATA  }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Installing package dependencies
        run: |
          python -m pip install --upgrade pip setuptools
          python -m pip install ".[test]"

      - name: Save changed files to env var
        run: |
          git fetch origin refs/pull/${{ github.event.number }}/head
          MERGE_COMMIT=$(git log --format='%H %P' --all | grep "$(git rev-parse FETCH_HEAD)\$" | cut -f1 -d' ')
          echo "CHANGED_FILES=$(git diff --name-only origin/master~1 $MERGE_COMMIT | tr '\n' ' ')"  >> $GITHUB_ENV

      - name: Get plugin info
        id: getpluginfo
        run: |
          echo "PLUGIN_INFO='$(python -c 'from brainscore_core.plugin_management.parse_plugin_changes import get_scoring_info; get_scoring_info("${{ env.CHANGED_FILES }}", "brainscore_vision")')'"  >> $GITHUB_OUTPUT

      - name: Check if only metadata changed
        id: check_metadata_only
        run: |
          MODIFIES_PLUGINS=$(echo ${{ steps.getpluginfo.outputs.PLUGIN_INFO }} | jq -r '.modifies_plugins')
          echo "modifies_plugins=${MODIFIES_PLUGINS}" >> $GITHUB_OUTPUT
          
          # filter out metadata.yml
          non_metadata=$(echo "${{ env.CHANGED_FILES }}" | tr ' ' '\n' | grep -Ev "metadata\.ya?ml" || true)

          if [ -z "$non_metadata" ] && [ "$MODIFIES_PLUGINS" = "true" ]; then
            echo "only_metadata=true" >> $GITHUB_OUTPUT
          else
            echo "only_metadata=false" >> $GITHUB_OUTPUT
          fi
          echo "non_metadata files: $non_metadata" 1>&2

      - name: Derive Plugin Directories
        id: derive_plugin_dirs
        if: steps.check_metadata_only.outputs.modifies_plugins == 'true'
        run: |
          # extract plugin directories from changed files
          plugin_dirs=$(echo "${{ env.CHANGED_FILES }}" | tr ' ' '\n' | grep -E 'brainscore_vision/(models|benchmarks)/' | awk -F'/' '{print $1"/"$2"/"$3}' | sort | uniq | paste -sd, - || echo "")
          echo "PLUGIN_DIRS=${plugin_dirs}" >> $GITHUB_OUTPUT
          
          # determine plugin type from directory structure
          plugin_type=$(echo "${{ env.CHANGED_FILES }}" | tr ' ' '\n' | grep -E 'brainscore_vision/(models|benchmarks)/' | grep -o -E '(models|benchmarks)' | head -n 1 || echo "")
          echo "PLUGIN_TYPE=${plugin_type}" >> $GITHUB_OUTPUT
          
          echo "Derived plugin directories: ${plugin_dirs}" 1>&2
          echo "Derived plugin type: ${plugin_type}" 1>&2

      - name: Check metadata status
        if: steps.check_metadata_only.outputs.modifies_plugins == 'true'
        id: check_metadata
        run: |
          # first check out the PR branch to access new directories
          git fetch origin pull/${{ github.event.number }}/head:pr-branch
          git checkout pr-branch
          
          # check if metadata.yml is in the PR changes
          metadata_in_pr=false
          if echo "${{ env.CHANGED_FILES }}" | grep -q "metadata.yml"; then
            metadata_in_pr=true
            echo "Metadata changes found in PR" 1>&2
          fi
          echo "METADATA_IN_PR=${metadata_in_pr}" >> $GITHUB_OUTPUT
          
          # get all plugin directories affected by this PR
          IFS=',' read -ra DIRS <<< "${{ steps.derive_plugin_dirs.outputs.PLUGIN_DIRS }}"
          
          # check if metadata.yml exists in each plugin directory
          metadata_missing=false
          for dir in "${DIRS[@]}"; do
            if [ -n "$dir" ] && [ ! -f "${dir}/metadata.yml" ]; then
              metadata_missing=true
              echo "Metadata is missing in directory: ${dir}" 1>&2
              break
            fi
          done
          
          echo "METADATA_MISSING=${metadata_missing}" >> $GITHUB_OUTPUT
          
          # determine if should run metadata processing
          if [ "$metadata_in_pr" = "true" ] || [ "$metadata_missing" = "true" ]; then
            echo "RUN_METADATA=true" >> $GITHUB_OUTPUT
          else
            echo "RUN_METADATA=false" >> $GITHUB_OUTPUT
          fi
          
          # switch back to the original branch
          git checkout -

      - name: Check if scoring needed
        if: steps.check_metadata_only.outputs.only_metadata == 'false'
        id: scoringneeded
        run: |
          echo "RUN_SCORING=$(jq -r '.run_score' <<< ${{ steps.getpluginfo.outputs.PLUGIN_INFO }})" >> $GITHUB_OUTPUT

      - name: Check for automerge-web label
        if: steps.check_metadata_only.outputs.only_metadata == 'false'
        id: check_label
        run: |
          LABELS_JSON="${{ toJSON(github.event.pull_request.labels.*.name) }}"
          if echo "$LABELS_JSON" | grep -q "automerge-web"; then
            echo "has_automerge_web=true" >> $GITHUB_ENV
          else
            echo "has_automerge_web=false" >> $GITHUB_ENV
          fi

      - name: Update PLUGIN_INFO based on label
        if: steps.check_metadata_only.outputs.only_metadata == 'false'
        run: |
          if [[ "$has_automerge_web" == "true" ]]; then
            BS_UID="$(echo '${{ github.event.pull_request.title }}' | sed -E 's/.*\(user:([^)]+)\).*/\1/')"
            BS_PUBLIC="$(echo '${{ github.event.pull_request.title }}' | sed -E 's/.*\(public:([^)]+)\).*/\1/')"
            PLUGIN_INFO=$(echo ${{ steps.getpluginfo.outputs.PLUGIN_INFO }} | tr -d "'" | jq -c ". + {user_id: \"$BS_UID\", public: \"$BS_PUBLIC\"}")
            echo "PLUGIN_INFO=${PLUGIN_INFO}" >> $GITHUB_ENV
          else
            echo "PLUGIN_INFO=$(echo ${{ steps.getpluginfo.outputs.PLUGIN_INFO }} | tr -d "'")" >> $GITHUB_ENV
          fi

      - name: Write PLUGIN_INFO to a json file
        if: steps.check_metadata_only.outputs.only_metadata == 'false'
        run: |
          echo "$PLUGIN_INFO" > plugin-info.json
      
      - name: Upload PLUGIN_INFO as an artifact
        if: steps.check_metadata_only.outputs.only_metadata == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: plugin-info
          path: plugin-info.json
  
  extract_email:
    name: Extracts email for both PRs and web submissions
    uses: ./.github/workflows/user_notification_system.yml
    needs: process_submission
    if: needs.process_submission.outputs.RUN_SCORING == 'True' && needs.process_submission.outputs.METADATA_ONLY == 'false'
    with:
      pr_username: ${{github.event.pull_request.user.login}} 
      pr_title: ${{ github.event.pull_request.title }}
      is_automerge_web: ${{ contains(github.event.pull_request.labels.*.name, 'automerge-web') }}
      action_type: 'extract_email'
    secrets: inherit
  
  update_plugin_info:
    name: Updates PLUGIN_INFO with various fields (domain, competition, model_type, email, metadata info)
    runs-on: ubuntu-latest
    needs: [extract_email, process_submission]
    steps:
      - name: Download PLUGIN_INFO artifact
        uses: actions/download-artifact@v4
        with:
          name: plugin-info
          path: artifact-directory

      - name: Set PLUGIN_INFO as an environment variable
        run: |
          PLUGIN_INFO=$(cat artifact-directory/plugin-info.json)
          echo "PLUGIN_INFO=${PLUGIN_INFO}" >> $GITHUB_ENV

      - name: Decrypt and mask user email
        run: |
          DECRYPTED_EMAIL=$(echo "${{ needs.extract_email.outputs.extracted_email }}" | openssl enc -aes-256-cbc -a -d -salt -pass pass:${{ secrets.EMAIL_ENCRYPTION_KEY }})
          echo "::add-mask::$DECRYPTED_EMAIL"
          echo "USER_EMAIL=${DECRYPTED_EMAIL}" >> $GITHUB_ENV

      - name: Update PLUGIN_INFO
        run: |
          PLUGIN_JSON=$(echo "$PLUGIN_INFO" | jq -c '. + {domain: "vision", competition: "None", model_type: "Brain_Model"}')
          echo "PLUGIN_INFO=$PLUGIN_JSON" >> $GITHUB_ENV
          
          PLUGIN_JSON=$(echo "$PLUGIN_JSON" | jq -c --arg email "$USER_EMAIL" '. + {email: $email}')
          echo "PLUGIN_INFO=$PLUGIN_JSON" >> $GITHUB_ENV
          echo "Updated PLUGIN_INFO: $PLUGIN_JSON"
          
          PLUGIN_JSON=$(echo "$PLUGIN_JSON" | jq -c \
            --arg plugin_dirs "${{ needs.process_submission.outputs.PLUGIN_DIRS }}" \
            --arg plugin_type "${{ needs.process_submission.outputs.PLUGIN_TYPE }}" \
            --arg run_metadata "${{ needs.process_submission.outputs.RUN_METADATA }}" \
            '. + {plugin_dirs: $plugin_dirs, plugin_type: $plugin_type, run_metadata: $run_metadata}')

      - name: Write PLUGIN_INFO to a json file
        run: |
          echo "$PLUGIN_INFO" > plugin-info2.json
      
      - name: Upload PLUGIN_INFO as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-info2
          path: plugin-info2.json

  run_scoring:
    name: Score plugins
    runs-on: ubuntu-latest
    needs: [process_submission, extract_email, update_plugin_info]
    if: needs.process_submission.outputs.RUN_SCORING == 'True'
    env:
      JENKINS_USER: ${{ secrets.JENKINS_USER }}
      JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
      JENKINS_TRIGGER: ${{ secrets.JENKINS_TRIGGER }}
    steps:
    
      - name: Download PLUGIN_INFO artifact
        uses: actions/download-artifact@v4
        with:
          name: plugin-info2
          path: artifact-directory
    
      - name: Set PLUGIN_INFO as an environment variable
        run: |
          PLUGIN_INFO=$(cat artifact-directory/plugin-info2.json)
          USER_EMAIL=$(echo "$PLUGIN_INFO" | jq -r '.email')
          echo "::add-mask::$USER_EMAIL"  # readd a mask when bringing email back from artifact
          echo "PLUGIN_INFO=${PLUGIN_INFO}" >> $GITHUB_ENV

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Build project
        run: |
          python -m pip install --upgrade pip setuptools
          python -m pip install "."

      - name: Run scoring
        run: |
          python -c 'from brainscore_core.submission.endpoints import call_jenkins; call_jenkins('\''${{ env.PLUGIN_INFO }}'\'')'

  process_metadata:
    name: Process metadata changes
    needs: process_submission
    if: needs.process_submission.outputs.METADATA_ONLY == 'true'
    uses: ./.github/workflows/handle_metadata.yml
    with:
      plugin-dir: ${{ needs.process_submission.outputs.PLUGIN_DIRS }}
      plugin-type: ${{ needs.process_submission.outputs.PLUGIN_TYPE }}
      db-connection: true
    secrets: inherit
        
